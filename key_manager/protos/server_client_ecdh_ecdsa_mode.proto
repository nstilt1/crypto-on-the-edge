syntax = "proto3";

package server_client_ecdh_ecdsa_mode;

// Some information that is necessary to decrypt the request
message DecryptInfo {
    // the ecdh key used for the server to decrypt the request
    bytes server_ecdh_key_id = 1;

    // the client's ecdh pubkey for decrypting the request. This can 
    // be PEM encoded or DER encoded
    oneof client_ecdh_pubkey {
        string pem = 5;
        bytes der = 6;
    }

    // the `info` string for use in an HKDF for decrypting the request
    bytes ecdh_info = 3;

    // the `salt` string for use in an HKDF for decrypting the request
    bytes ecdh_salt = 4;
}

// An API request to the Service.
message Request {
    // this value allows the client to decide which symmetric encryption 
    // algorithm will be used for the request and response. The server may 
    // reject the request if the value here is unacceptable.
    string symmetric_algorithm = 1;

    // the client's ID, or their desired prefix for their ID based on whether 
    // this is the initial handshake or not
    string client_id = 2;

    // Encrypted payload with the nonce prefixed to the encrypted data, and the
    // tag postfixed to the encrypted data.
    bytes data = 3;

    // Information to decrypt the request
    DecryptInfo decryption_info = 4;

    // The ECDSA key ID that the server will use to sign its response
    bytes server_ecdsa_key_id = 5;

    // the timestamp, in seconds since UNIX_EPOCH
    uint64 timestamp = 6;
}

// Some ecdh key information
message EcdhKey {
    bytes ecdh_key_id = 1;
    bytes ecdh_public_key = 2;
    string ecdh_public_key_pem = 3;
}

// An API response from the service.
//
// To decrypt `data`, you will need to use the same symmetric encryption key
// that was used to encrypt it. The nonce will be different.
// 
// There will be a signature stored in the `Signature` header, which is 
// computed from a hash of this encoded structure.
message Response {
    // Encrypted payload with the nonce prefixed to the encrypted data
    bytes data = 2;

    // The protobuf-encoded key information for the client to use for their next 
    // request
    EcdhKey next_ecdh_key = 5;

    // the timestamp, in seconds since UNIX_EPOCH
    uint64 timestamp = 6;
}